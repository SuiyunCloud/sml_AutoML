<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="xgb_8py" kind="file">
    <compoundname>xgb.py</compoundname>
    <innerclass refid="classspeedml_1_1xgb_1_1_xgb" prot="public">speedml::xgb::Xgb</innerclass>
    <innernamespace refid="namespacespeedml_1_1xgb">speedml::xgb</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacespeedml_1_1xgb" refkind="compound"><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="2"><highlight class="stringliteral">Speedml<sp/>Xgb<sp/>component<sp/>with<sp/>methods<sp/>that<sp/>work<sp/>on<sp/>XGBoost<sp/>model<sp/>workflow.<sp/>Contact<sp/>author<sp/>https://twitter.com/manavsehgal.<sp/>Code,<sp/>docs<sp/>and<sp/>demos<sp/>https://speedml.com.</highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>(absolute_import,<sp/>division,</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_function,<sp/>unicode_literals)</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>builtins<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacespeedml_1_1base" kindref="compound">speedml.base</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Base</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pandas<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>pd</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>xgboost<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>xgb</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>sklearn.model_selection<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>GridSearchCV</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>sklearn.metrics<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>accuracy_score</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>sklearn.model_selection<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>train_test_split</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>sklearn.feature_selection<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>SelectFromModel</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="classspeedml_1_1xgb_1_1_xgb" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1xgb_1_1_xgb" kindref="compound">Xgb</ref>(<ref refid="classspeedml_1_1base_1_1_base" kindref="compound">Base</ref>):</highlight></codeline>
<codeline lineno="20" refid="classspeedml_1_1xgb_1_1_xgb_1a5f3fd53c867c4ebb63bb75e4e4940e5e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1xgb_1_1_xgb_1a77b29c3f3ff440f9aeec7f102d5e0eb7" kindref="member">sample_accuracy</ref>(self):</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Calculate<sp/>the<sp/>accuracy<sp/>of<sp/>an<sp/>XGBoost<sp/>model<sp/>based<sp/>on<sp/>number<sp/>of<sp/>correct<sp/>labels<sp/>in<sp/>prediction.</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>train_preds<sp/>=<sp/>Base.xgb_model.predict(Base.train_X)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rounded_preds<sp/>=<sp/>np.round(train_preds).astype(int).flatten()</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correct<sp/>=<sp/>np.where(rounded_preds<sp/>==<sp/>Base.train_y)[0]</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correct_labels<sp/>=<sp/>len(correct)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_labels<sp/>=<sp/>Base.train_y.shape[0]</highlight></codeline>
<codeline lineno="29" refid="classspeedml_1_1xgb_1_1_xgb_1a77b29c3f3ff440f9aeec7f102d5e0eb7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classspeedml_1_1xgb_1_1_xgb_1a77b29c3f3ff440f9aeec7f102d5e0eb7" kindref="member">sample_accuracy</ref><sp/>=<sp/>round(correct_labels<sp/>/<sp/>total_labels<sp/>*<sp/>100,<sp/>2)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;Accuracy<sp/>=<sp/>{}%.<sp/>Found<sp/>{}<sp/>correct<sp/>of<sp/>{}<sp/>total<sp/>labels&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message.format(self.<ref refid="classspeedml_1_1xgb_1_1_xgb_1a77b29c3f3ff440f9aeec7f102d5e0eb7" kindref="member">sample_accuracy</ref>,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correct_labels,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_labels)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="classspeedml_1_1xgb_1_1_xgb_1a418a84a4637d48c9be84d2ea87fd0f47" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1xgb_1_1_xgb_1a418a84a4637d48c9be84d2ea87fd0f47" kindref="member">hyper</ref>(self,<sp/>select_params,<sp/>fixed_params):</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tune<sp/>XGBoost<sp/>hyper-parameters<sp/>by<sp/>selecting<sp/>from<sp/>permutations<sp/>of<sp/>values<sp/>from<sp/>the<sp/>``select_params``<sp/>dictionary.<sp/>Remaining<sp/>parameters<sp/>with<sp/>single<sp/>values<sp/>are<sp/>specified<sp/>by<sp/>the<sp/>``fixed_params``<sp/>dictionary.<sp/>Returns<sp/>a<sp/>dataframe<sp/>with<sp/>ranking<sp/>of<sp/>``select_params``<sp/>items.</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_GBM<sp/>=<sp/>GridSearchCV(xgb.XGBClassifier(**fixed_params),<sp/>select_params,<sp/>scoring<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;accuracy&apos;</highlight><highlight class="normal">,<sp/>cv<sp/>=<sp/>5,<sp/>n_jobs<sp/>=<sp/>-1)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_GBM.fit(Base.train_X,<sp/>Base.train_y)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df<sp/>=<sp/>pd.DataFrame(optimized_GBM.cv_results_)[[</highlight><highlight class="stringliteral">&apos;rank_test_score&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;params&apos;</highlight><highlight class="normal">]].sort_values(by=</highlight><highlight class="stringliteral">&apos;rank_test_score&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df.rename(columns<sp/>=<sp/>{</highlight><highlight class="stringliteral">&apos;rank_test_score&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;rank&apos;</highlight><highlight class="normal">},<sp/>inplace<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>df</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="classspeedml_1_1xgb_1_1_xgb_1a1033f35b321809bc87e4ab0e33ba824b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1xgb_1_1_xgb_1a1033f35b321809bc87e4ab0e33ba824b" kindref="member">cv</ref>(self,<sp/>grid_params):</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Calculate<sp/>the<sp/>Cross-Validation<sp/>(CV)<sp/>score<sp/>for<sp/>XGBoost<sp/>model<sp/>based<sp/>on<sp/>``grid_params``<sp/>parameters.<sp/>Sets<sp/>xgb.cv_results<sp/>variable<sp/>to<sp/>the<sp/>resulting<sp/>dataframe.</highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xgdmat<sp/>=<sp/>xgb.DMatrix(Base.train_X,<sp/>Base.train_y)</highlight></codeline>
<codeline lineno="50" refid="classspeedml_1_1xgb_1_1_xgb_1a83315f6ca77acc34f735f04f79044c35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classspeedml_1_1xgb_1_1_xgb_1a83315f6ca77acc34f735f04f79044c35" kindref="member">cv_results</ref><sp/>=<sp/>xgb.cv(</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params<sp/>=<sp/>grid_params,<sp/>dtrain<sp/>=<sp/>xgdmat,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_boost_round<sp/>=<sp/>1000,<sp/>nfold<sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metrics<sp/>=<sp/>[</highlight><highlight class="stringliteral">&apos;error&apos;</highlight><highlight class="normal">],<sp/>early_stopping_rounds<sp/>=<sp/>20)</highlight></codeline>
<codeline lineno="54" refid="classspeedml_1_1xgb_1_1_xgb_1a27de9afd514bc3517198647d288f3833" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classspeedml_1_1xgb_1_1_xgb_1a27de9afd514bc3517198647d288f3833" kindref="member">error</ref><sp/>=<sp/>self.cv_results.get_value(len(self.<ref refid="classspeedml_1_1xgb_1_1_xgb_1a83315f6ca77acc34f735f04f79044c35" kindref="member">cv_results</ref>)<sp/>-<sp/>1,<sp/></highlight><highlight class="stringliteral">&apos;test-error-mean&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="classspeedml_1_1xgb_1_1_xgb_1a36f3825d038c749d612461a342c68ba7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1xgb_1_1_xgb_1a36f3825d038c749d612461a342c68ba7" kindref="member">params</ref>(self,<sp/>params):</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sets<sp/>Base.xgb_params<sp/>to<sp/>``params``<sp/>dictionary.</highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.xgb_params<sp/>=<sp/>params</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="classspeedml_1_1xgb_1_1_xgb_1a4e97b77836e123ebb8c1e2a7243ba13b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1xgb_1_1_xgb_1a4e97b77836e123ebb8c1e2a7243ba13b" kindref="member">classifier</ref>(self):</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Creates<sp/>the<sp/>XGBoost<sp/>Classifier<sp/>with<sp/>Base.xgb_params<sp/>dictionary<sp/>of<sp/>model<sp/>hyper-parameters.</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="classspeedml_1_1xgb_1_1_xgb_1a50cb05d4e8c282ed5bbcf0642d898337" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classspeedml_1_1xgb_1_1_xgb_1a50cb05d4e8c282ed5bbcf0642d898337" kindref="member">clf</ref><sp/>=<sp/>xgb.XGBClassifier(**Base.xgb_params)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="classspeedml_1_1xgb_1_1_xgb_1a86288332d86668f71c5cd1c6d11d369c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1xgb_1_1_xgb_1a86288332d86668f71c5cd1c6d11d369c" kindref="member">fit</ref>(self):</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sets<sp/>Base.xgb_model<sp/>with<sp/>trained<sp/>XGBoost<sp/>model.</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.xgb_model<sp/>=<sp/>self.clf.fit(Base.train_X,<sp/>Base.train_y)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="classspeedml_1_1xgb_1_1_xgb_1a9cc01a906730b51cbf32fb7dc3c787dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1xgb_1_1_xgb_1a9cc01a906730b51cbf32fb7dc3c787dc" kindref="member">predict</ref>(self):</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sets<sp/>xgb.predictions<sp/>with<sp/>predictions<sp/>from<sp/>the<sp/>XGBoost<sp/>model.</highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="classspeedml_1_1xgb_1_1_xgb_1af2efd73c28a06979d50bda4cff97d190" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classspeedml_1_1xgb_1_1_xgb_1af2efd73c28a06979d50bda4cff97d190" kindref="member">predictions</ref><sp/>=<sp/>Base.xgb_model.predict(Base.test_X)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="classspeedml_1_1xgb_1_1_xgb_1accf7b71381d6fd00b0fe02bc37699db3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1xgb_1_1_xgb_1accf7b71381d6fd00b0fe02bc37699db3" kindref="member">feature_selection</ref>(self):</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns<sp/>threshold<sp/>and<sp/>accuracy<sp/>for<sp/>``n``<sp/>number<sp/>of<sp/>features.</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.data_n()</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X<sp/>=<sp/>Base.train_n.drop([Base.target],<sp/>axis=1)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Y<sp/>=<sp/>Base.train[Base.target]</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Split<sp/>data<sp/>into<sp/>train<sp/>and<sp/>test<sp/>sets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X_train,<sp/>X_test,<sp/>y_train,<sp/>y_test<sp/>=<sp/>train_test_split(X,<sp/>Y,<sp/>test_size=0.3,<sp/>random_state=7)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Fit<sp/>model<sp/>on<sp/>all<sp/>training<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model<sp/>=<sp/>xgb.XGBClassifier()</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model.fit(X_train,<sp/>y_train)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>predictions<sp/>for<sp/>test<sp/>data<sp/>and<sp/>evaluate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y_pred<sp/>=<sp/>model.predict(X_test)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>predictions<sp/>=<sp/>[round(value)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>value<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>y_pred]</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accuracy<sp/>=<sp/>accuracy_score(y_test,<sp/>predictions)</highlight></codeline>
<codeline lineno="99" refid="classspeedml_1_1xgb_1_1_xgb_1ae96aac9213583cd3c8e000066cfcfdba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classspeedml_1_1xgb_1_1_xgb_1ae96aac9213583cd3c8e000066cfcfdba" kindref="member">feature_accuracy</ref><sp/>=<sp/>round(accuracy<sp/>*<sp/>100.0,<sp/>2)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Accuracy:<sp/>%f%%&quot;</highlight><highlight class="normal"><sp/>%<sp/>(self.<ref refid="classspeedml_1_1xgb_1_1_xgb_1ae96aac9213583cd3c8e000066cfcfdba" kindref="member">feature_accuracy</ref>))</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Fit<sp/>model<sp/>using<sp/>each<sp/>importance<sp/>as<sp/>a<sp/>threshold</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thresholds<sp/>=<sp/>np.sort(model.feature_importances_)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>thresh<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>thresholds:</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Select<sp/>features<sp/>using<sp/>threshold</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selection<sp/>=<sp/>SelectFromModel(model,<sp/>threshold=thresh,<sp/>prefit=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>select_X_train<sp/>=<sp/>selection.transform(X_train)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Train<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selection_model<sp/>=<sp/>xgb.XGBClassifier()</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selection_model.fit(select_X_train,<sp/>y_train)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Evalation<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>select_X_test<sp/>=<sp/>selection.transform(X_test)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y_pred<sp/>=<sp/>selection_model.predict(select_X_test)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>predictions<sp/>=<sp/>[round(value)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>value<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>y_pred]</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accuracy<sp/>=<sp/>accuracy_score(y_test,<sp/>predictions)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Thresh=%.3f,<sp/>n=%d,<sp/>Accuracy:<sp/>%.2f%%&quot;</highlight><highlight class="normal"><sp/>%<sp/>(thresh,<sp/>select_X_train.shape[1],<sp/>accuracy*100.0))</highlight></codeline>
    </programlisting>
    <location file="D:/programs/Python3.5.2/Lib/site-packages/speedml/xgb.py"/>
  </compounddef>
</doxygen>
