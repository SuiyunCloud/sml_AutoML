<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="feature_8py" kind="file">
    <compoundname>feature.py</compoundname>
    <innerclass refid="classspeedml_1_1feature_1_1_feature" prot="public">speedml::feature::Feature</innerclass>
    <innernamespace refid="namespacespeedml_1_1feature">speedml::feature</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacespeedml_1_1feature" refkind="compound"><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="2"><highlight class="stringliteral">Speedml<sp/>Feature<sp/>component<sp/>with<sp/>methods<sp/>that<sp/>work<sp/>on<sp/>dataset<sp/>features<sp/>or<sp/>the<sp/>feature<sp/>engineering<sp/>workflow.<sp/>Contact<sp/>author<sp/>https://twitter.com/manavsehgal.<sp/>Code,<sp/>docs<sp/>and<sp/>demos<sp/>https://speedml.com.</highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>(absolute_import,<sp/>division,</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_function,<sp/>unicode_literals)</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>builtins<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacespeedml_1_1base" kindref="compound">speedml.base</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Base</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacespeedml_1_1util" kindref="compound">speedml.util</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>DataFrameImputer</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pandas<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>pd</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>sklearn.preprocessing<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>LabelEncoder</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>re</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="classspeedml_1_1feature_1_1_feature" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature" kindref="compound">Feature</ref>(<ref refid="classspeedml_1_1base_1_1_base" kindref="compound">Base</ref>):</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>Base.test[Base.target]<sp/>=<sp/>-1</highlight></codeline>
<codeline lineno="19" refid="classspeedml_1_1feature_1_1_feature_1a8e3c0111f0cdbbb4b3f1adc4633f8aad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>__combine__<sp/>=<sp/>Base.train.append(Base.test)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="classspeedml_1_1feature_1_1_feature_1aa9b9980cf695b79c9e487ba0fdbf02b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1aa9b9980cf695b79c9e487ba0fdbf02b8" kindref="member">drop</ref>(self,<sp/>features):</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Drop<sp/>one<sp/>or<sp/>more<sp/>list<sp/>of<sp/>strings<sp/>naming<sp/>``features``<sp/>from<sp/>train<sp/>and<sp/>test<sp/>datasets.</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>Base.train.shape[1]</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train<sp/>=<sp/>Base.train.drop(features,<sp/>axis=1)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test<sp/>=<sp/>Base.test.drop(features,<sp/>axis=1)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>Base.train.shape[1]</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;Dropped<sp/>{}<sp/>features<sp/>with<sp/>{}<sp/>features<sp/>available.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message.format(start<sp/>-<sp/>end,<sp/>end)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="classspeedml_1_1feature_1_1_feature_1ad525055a5db60d31b27cf8c53a8948b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1ad525055a5db60d31b27cf8c53a8948b3" kindref="member">impute</ref>(self):</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Replace<sp/>empty<sp/>values<sp/>in<sp/>the<sp/>entire<sp/>dataframe<sp/>with<sp/>median<sp/>value<sp/>for<sp/>numerical<sp/>features<sp/>and<sp/>most<sp/>common<sp/>values<sp/>for<sp/>text<sp/>features.</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>Base.train.isnull().<ref refid="classspeedml_1_1feature_1_1_feature_1a18e4c347857e70e1d30e1fa754ec8e2c" kindref="member">sum</ref>().<ref refid="classspeedml_1_1feature_1_1_feature_1a18e4c347857e70e1d30e1fa754ec8e2c" kindref="member">sum</ref>()</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test[Base.target]<sp/>=<sp/>-1</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combine<sp/>=<sp/>Base.train.append(Base.test)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combine<sp/>=<sp/><ref refid="classspeedml_1_1util_1_1_data_frame_imputer" kindref="compound">DataFrameImputer</ref>().fit_transform(combine)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train<sp/>=<sp/>combine[0:Base.train.shape[0]]</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test<sp/>=<sp/>combine[Base.train.shape[0]::]</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test<sp/>=<sp/>Base.test.drop([Base.target],<sp/>axis=1)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>Base.train.isnull().<ref refid="classspeedml_1_1feature_1_1_feature_1a18e4c347857e70e1d30e1fa754ec8e2c" kindref="member">sum</ref>().<ref refid="classspeedml_1_1feature_1_1_feature_1a18e4c347857e70e1d30e1fa754ec8e2c" kindref="member">sum</ref>()</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;Imputed<sp/>{}<sp/>empty<sp/>values<sp/>to<sp/>{}.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message.format(start,<sp/>end)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="classspeedml_1_1feature_1_1_feature_1a1c0fb1655c629f85f19725d7d7a224dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1a1c0fb1655c629f85f19725d7d7a224dc" kindref="member">mapping</ref>(self,<sp/>a,<sp/>data):</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert<sp/>values<sp/>for<sp/>categorical<sp/>feature<sp/>``a``<sp/>using<sp/>``data``<sp/>dictionary.<sp/>Use<sp/>when<sp/>number<sp/>of<sp/>categories<sp/>are<sp/>limited<sp/>otherwise<sp/>use<sp/>labels.</highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train[a]<sp/>=<sp/>Base.train[a].apply(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x:<sp/>data[x])</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test[a]<sp/>=<sp/>Base.test[a].apply(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x:<sp/>data[x])</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="classspeedml_1_1feature_1_1_feature_1aea22185cedbbbc5bc44cb53ac55f17be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1aea22185cedbbbc5bc44cb53ac55f17be" kindref="member">fillna</ref>(self,<sp/>a,<sp/>new):</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fills<sp/>empty<sp/>or<sp/>null<sp/>values<sp/>in<sp/>``a``<sp/>feature<sp/>name<sp/>with<sp/>``new``<sp/>string<sp/>value.</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>Base.train[a].isnull().<ref refid="classspeedml_1_1feature_1_1_feature_1a18e4c347857e70e1d30e1fa754ec8e2c" kindref="member">sum</ref>()<sp/>+<sp/>Base.test[a].isnull().<ref refid="classspeedml_1_1feature_1_1_feature_1a18e4c347857e70e1d30e1fa754ec8e2c" kindref="member">sum</ref>()</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train[a]<sp/>=<sp/>Base.train[a].<ref refid="classspeedml_1_1feature_1_1_feature_1aea22185cedbbbc5bc44cb53ac55f17be" kindref="member">fillna</ref>(new)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test[a]<sp/>=<sp/>Base.test[a].<ref refid="classspeedml_1_1feature_1_1_feature_1aea22185cedbbbc5bc44cb53ac55f17be" kindref="member">fillna</ref>(new)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;Filled<sp/>{}<sp/>null<sp/>values<sp/>across<sp/>test<sp/>and<sp/>train<sp/>datasets.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message.format(start)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="classspeedml_1_1feature_1_1_feature_1ac9ef7e3699b654410a43d0f1ba146a0f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1ac9ef7e3699b654410a43d0f1ba146a0f" kindref="member">replace</ref>(self,<sp/>a,<sp/>match,<sp/>new):</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>In<sp/>feature<sp/>``a``<sp/>values<sp/>``match``<sp/>string<sp/>or<sp/>list<sp/>of<sp/>strings<sp/>and<sp/>replace<sp/>with<sp/>a<sp/>``new``<sp/>string.</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>type(match)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>str:</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>[TODO]<sp/>What<sp/>is<sp/>the<sp/>performance<sp/>cost<sp/>of<sp/>message<sp/>ops?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>Base.train[Base.train[a]<sp/>==<sp/>match][a].shape[0]<sp/>+<sp/>Base.test[Base.test[a]<sp/>==<sp/>match][a].shape[0]</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;Replaced<sp/>{}<sp/>matching<sp/>values<sp/>across<sp/>train<sp/>and<sp/>test<sp/>datasets.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/>message.format(start)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>[TODO]<sp/>Can<sp/>we<sp/>possibly<sp/>use<sp/>pandas.isin<sp/>to<sp/>check<sp/>counts?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;Replaced<sp/>matching<sp/>list<sp/>of<sp/>strings<sp/>across<sp/>train<sp/>and<sp/>test<sp/>datasets.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train[a]<sp/>=<sp/>Base.train[a].<ref refid="classspeedml_1_1feature_1_1_feature_1ac9ef7e3699b654410a43d0f1ba146a0f" kindref="member">replace</ref>(match,<sp/>new)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test[a]<sp/>=<sp/>Base.test[a].<ref refid="classspeedml_1_1feature_1_1_feature_1ac9ef7e3699b654410a43d0f1ba146a0f" kindref="member">replace</ref>(match,<sp/>new)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="classspeedml_1_1feature_1_1_feature_1a33a0f9052b7ab19f0e01eac2825544ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1a33a0f9052b7ab19f0e01eac2825544ce" kindref="member">outliers</ref>(self,<sp/>a,<sp/>lower<sp/>=<sp/>None,<sp/>upper<sp/>=<sp/>None):</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fix<sp/>outliers<sp/>for<sp/>``lower``<sp/>or<sp/>``upper``<sp/>or<sp/>both<sp/>percentile<sp/>of<sp/>values<sp/>within<sp/>``a``<sp/>feature.</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>upper:</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upper_value<sp/>=<sp/>np.percentile(Base.train[a].values,<sp/>upper)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>change<sp/>=<sp/>Base.train.loc[Base.train[a]<sp/>&gt;<sp/>upper_value,<sp/>a].shape[0]</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train.loc[Base.train[a]<sp/>&gt;<sp/>upper_value,<sp/>a]<sp/>=<sp/>upper_value</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;Fixed<sp/>{}<sp/>or<sp/>{:.2f}%<sp/>upper<sp/>outliers.<sp/>&apos;</highlight><highlight class="normal">.format(change,<sp/>change/Base.train.shape[0]*100)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>lower:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lower_value<sp/>=<sp/>np.percentile(Base.train[a].values,<sp/>lower)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>change<sp/>=<sp/>Base.train.loc[Base.train[a]<sp/>&lt;<sp/>lower_value,<sp/>a].shape[0]</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train.loc[Base.train[a]<sp/>&lt;<sp/>lower_value,<sp/>a]<sp/>=<sp/>lower_value</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/>message<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;Fixed<sp/>{}<sp/>or<sp/>{:.2f}%<sp/>lower<sp/>outliers.&apos;</highlight><highlight class="normal">.format(change,<sp/>change/Base.train.shape[0]*100)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="classspeedml_1_1feature_1_1_feature_1a8789599466c18fc5e34482daa8d1c7d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1a8789599466c18fc5e34482daa8d1c7d7" kindref="member">_density_by_feature</ref>(self,<sp/>a):</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vals<sp/>=<sp/>Base.train[a].value_counts()</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dvals<sp/>=<sp/>vals.to_dict()</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train[a<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;_density&apos;</highlight><highlight class="normal">]<sp/>=<sp/>Base.train[a].apply(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x:<sp/>dvals.get(x,<sp/>vals.min()))</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test[a<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;_density&apos;</highlight><highlight class="normal">]<sp/>=<sp/>Base.test[a].apply(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x:<sp/>dvals.get(x,<sp/>vals.min()))</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="classspeedml_1_1feature_1_1_feature_1a4fc59f6174e296d5e0c950719882d095" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1a4fc59f6174e296d5e0c950719882d095" kindref="member">density</ref>(self,<sp/>a):</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Create<sp/>new<sp/>feature<sp/>named<sp/>``a``<sp/>feature<sp/>name<sp/>+<sp/>suffix<sp/>&apos;_density&apos;,<sp/>based<sp/>on<sp/>density<sp/>or<sp/>value_counts<sp/>for<sp/>each<sp/>unique<sp/>value<sp/>in<sp/>``a``<sp/>feature<sp/>specified<sp/>as<sp/>a<sp/>string<sp/>or<sp/>multiple<sp/>features<sp/>as<sp/>a<sp/>list<sp/>of<sp/>strings.</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(a,<sp/>str):</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classspeedml_1_1feature_1_1_feature_1a8789599466c18fc5e34482daa8d1c7d7" kindref="member">_density_by_feature</ref>(a)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(a,<sp/>list):</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>feature<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>a:</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classspeedml_1_1feature_1_1_feature_1a8789599466c18fc5e34482daa8d1c7d7" kindref="member">_density_by_feature</ref>(feature)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="classspeedml_1_1feature_1_1_feature_1a7d28f8ab4aa9194e6c0f479e6a3b0343" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1a7d28f8ab4aa9194e6c0f479e6a3b0343" kindref="member">add</ref>(self,<sp/>a,<sp/>num):</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Update<sp/>``a``<sp/>numeric<sp/>feature<sp/>by<sp/>adding<sp/>``num``<sp/>number<sp/>to<sp/>each<sp/>values.</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train[a]<sp/>=<sp/>Base.train[a]<sp/>+<sp/>num</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test[a]<sp/>=<sp/>Base.test[a]<sp/>+<sp/>num</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="classspeedml_1_1feature_1_1_feature_1a18e4c347857e70e1d30e1fa754ec8e2c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1a18e4c347857e70e1d30e1fa754ec8e2c" kindref="member">sum</ref>(self,<sp/>new,<sp/>a,<sp/>b):</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Create<sp/>``new``<sp/>numeric<sp/>feature<sp/>by<sp/>adding<sp/>``a``<sp/>+<sp/>``b``<sp/>feature<sp/>values.</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train[new]<sp/>=<sp/>Base.train[a]<sp/>+<sp/>Base.train[b]</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test[new]<sp/>=<sp/>Base.test[a]<sp/>+<sp/>Base.test[b]</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="classspeedml_1_1feature_1_1_feature_1a1f4e39a890bfabf0f73236efe44477f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1a1f4e39a890bfabf0f73236efe44477f5" kindref="member">diff</ref>(self,<sp/>new,<sp/>a,<sp/>b):</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Create<sp/>``new``<sp/>numeric<sp/>feature<sp/>by<sp/>subtracting<sp/>``a``<sp/>-<sp/>``b``<sp/>feature<sp/>values.</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train[new]<sp/>=<sp/>Base.train[a]<sp/>-<sp/>Base.train[b]</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test[new]<sp/>=<sp/>Base.test[a]<sp/>-<sp/>Base.test[b]</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="classspeedml_1_1feature_1_1_feature_1ab079bb64ca93c9af52e9ce69d5f7e069" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1ab079bb64ca93c9af52e9ce69d5f7e069" kindref="member">product</ref>(self,<sp/>new,<sp/>a,<sp/>b):</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Create<sp/>``new``<sp/>numeric<sp/>feature<sp/>by<sp/>multiplying<sp/>``a``<sp/>*<sp/>``b``<sp/>feature<sp/>values.</highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train[new]<sp/>=<sp/>Base.train[a]<sp/>*<sp/>Base.train[b]</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test[new]<sp/>=<sp/>Base.test[a]<sp/>*<sp/>Base.test[b]</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="classspeedml_1_1feature_1_1_feature_1a5f991ac16b995cd0794fe5117c59ba12" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1a5f991ac16b995cd0794fe5117c59ba12" kindref="member">divide</ref>(self,<sp/>new,<sp/>a,<sp/>b):</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Create<sp/>``new``<sp/>numeric<sp/>feature<sp/>by<sp/>dividing<sp/>``a``<sp/>/<sp/>``b``<sp/>feature<sp/>values.<sp/>Replace<sp/>division-by-zero<sp/>with<sp/>zero<sp/>values.</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train[new]<sp/>=<sp/>Base.train[a]<sp/>/<sp/>Base.train[b]</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test[new]<sp/>=<sp/>Base.test[a]<sp/>/<sp/>Base.test[b]</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Histograms<sp/>require<sp/>finite<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train[new]<sp/>=<sp/>Base.train[new].<ref refid="classspeedml_1_1feature_1_1_feature_1ac9ef7e3699b654410a43d0f1ba146a0f" kindref="member">replace</ref>([np.inf,<sp/>-np.inf],<sp/>0)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test[new]<sp/>=<sp/>Base.test[new].<ref refid="classspeedml_1_1feature_1_1_feature_1ac9ef7e3699b654410a43d0f1ba146a0f" kindref="member">replace</ref>([np.inf,<sp/>-np.inf],<sp/>0)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="classspeedml_1_1feature_1_1_feature_1a647c1981d66ee751e35ffb6c41704168" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1a647c1981d66ee751e35ffb6c41704168" kindref="member">round</ref>(self,<sp/>new,<sp/>a,<sp/>precision):</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="164"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Create<sp/>``new``<sp/>numeric<sp/>feature<sp/>by<sp/>rounding<sp/>``a``<sp/>feature<sp/>value<sp/>to<sp/>``precision``<sp/>decimal<sp/>places.</highlight></codeline>
<codeline lineno="165"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train[new]<sp/>=<sp/><ref refid="classspeedml_1_1feature_1_1_feature_1a647c1981d66ee751e35ffb6c41704168" kindref="member">round</ref>(Base.train[a],<sp/>precision)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test[new]<sp/>=<sp/><ref refid="classspeedml_1_1feature_1_1_feature_1a647c1981d66ee751e35ffb6c41704168" kindref="member">round</ref>(Base.test[a],<sp/>precision)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="classspeedml_1_1feature_1_1_feature_1a771eebb4a2f2ca771b8e4e55ecefea06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1a771eebb4a2f2ca771b8e4e55ecefea06" kindref="member">concat</ref>(self,<sp/>new,<sp/>a,<sp/>sep,<sp/>b):</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Create<sp/>``new``<sp/>text<sp/>feature<sp/>by<sp/>concatenating<sp/>``a``<sp/>and<sp/>``b``<sp/>text<sp/>feature<sp/>values,<sp/>using<sp/>``sep``<sp/>separator.</highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train[new]<sp/>=<sp/>Base.train[a].astype(str)<sp/>+<sp/>sep<sp/>+<sp/>Base.train[b].astype(str)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test[new]<sp/>=<sp/>Base.test[a].astype(str)<sp/>+<sp/>sep<sp/>+<sp/>Base.test[b].astype(str)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="classspeedml_1_1feature_1_1_feature_1a3234f7010a86f28072715e7e9fcf84a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1a3234f7010a86f28072715e7e9fcf84a2" kindref="member">list_len</ref>(self,<sp/>new,<sp/>a):</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Create<sp/>``new``<sp/>numeric<sp/>feature<sp/>based<sp/>on<sp/>length<sp/>or<sp/>item<sp/>count<sp/>from<sp/>``a``<sp/>feature<sp/>containing<sp/>list<sp/>object<sp/>as<sp/>values.</highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train[new]<sp/>=<sp/>Base.train[a].apply(len)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test[new]<sp/>=<sp/>Base.test[a].apply(len)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="classspeedml_1_1feature_1_1_feature_1aaba9103b85b548a5983f5ce33021ef0e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1aaba9103b85b548a5983f5ce33021ef0e" kindref="member">word_count</ref>(self,<sp/>new,<sp/>a):</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="185"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Create<sp/>``new``<sp/>numeric<sp/>feature<sp/>based<sp/>on<sp/>length<sp/>or<sp/>word<sp/>count<sp/>from<sp/>``a``<sp/>feature<sp/>containing<sp/>free-form<sp/>text.</highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train[new]<sp/>=<sp/>Base.train[a].apply(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x:<sp/>len(x.split(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test[new]<sp/>=<sp/>Base.test[a].apply(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x:<sp/>len(x.split(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="classspeedml_1_1feature_1_1_feature_1afdc31aa9e6c8ad55d634c0f8bcac1737" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1afdc31aa9e6c8ad55d634c0f8bcac1737" kindref="member">_regex_text</ref>(self,<sp/>regex,<sp/>text):</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regex_search<sp/>=<sp/>re.search(regex,<sp/>text)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>the<sp/>word<sp/>exists,<sp/>extract<sp/>and<sp/>return<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>regex_search:</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>regex_search.group(1)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="classspeedml_1_1feature_1_1_feature_1a230b7afc799bd71a092e773abb2b89b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1a230b7afc799bd71a092e773abb2b89b5" kindref="member">extract</ref>(self,<sp/>a,<sp/>regex,<sp/>new=None):</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="199"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Match<sp/>``regex``<sp/>regular<sp/>expression<sp/>with<sp/>``a``<sp/>text<sp/>feature<sp/>values<sp/>to<sp/>update<sp/>``a``<sp/>feature<sp/>with<sp/>matching<sp/>text<sp/>if<sp/>``new``<sp/>=<sp/>None.<sp/>Otherwise<sp/>create<sp/>``new``<sp/>feature<sp/>based<sp/>on<sp/>matching<sp/>text.</highlight></codeline>
<codeline lineno="200"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train[new<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>new<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>a]<sp/>=<sp/>Base.train[a].apply(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x:<sp/>self.<ref refid="classspeedml_1_1feature_1_1_feature_1afdc31aa9e6c8ad55d634c0f8bcac1737" kindref="member">_regex_text</ref>(regex=regex,<sp/>text=x))</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test[new<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>new<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>a]<sp/>=<sp/>Base.test[a].apply(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x:<sp/>self.<ref refid="classspeedml_1_1feature_1_1_feature_1afdc31aa9e6c8ad55d634c0f8bcac1737" kindref="member">_regex_text</ref>(regex=regex,<sp/>text=x))</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="classspeedml_1_1feature_1_1_feature_1a8b3638cc1b068c368952692fb50e8c1b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1a8b3638cc1b068c368952692fb50e8c1b" kindref="member">labels</ref>(self,<sp/>features):</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="206"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Generate<sp/>numerical<sp/>labels<sp/>replacing<sp/>text<sp/>values<sp/>from<sp/>list<sp/>of<sp/>categorical<sp/>``features``.</highlight></codeline>
<codeline lineno="207"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test[Base.target]<sp/>=<sp/>-1</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combine<sp/>=<sp/>Base.train.append(Base.test)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>le<sp/>=<sp/>LabelEncoder()</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>feature<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>features:</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combine[feature]<sp/>=<sp/>le.fit_transform(combine[feature])</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train<sp/>=<sp/>combine[0:Base.train.shape[0]]</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test<sp/>=<sp/>combine[Base.train.shape[0]::]</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test<sp/>=<sp/>Base.test.drop([Base.target],<sp/>axis=1)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1a75bff6d8734b5ef1f5399f0262c98ea0" kindref="member">cut</ref>(self,refFeature,<sp/>newFeature,<sp/>bins,<sp/>right=True,<sp/>labels=None,<sp/>retbins=False,<sp/>precision=3,</highlight></codeline>
<codeline lineno="220" refid="classspeedml_1_1feature_1_1_feature_1a75bff6d8734b5ef1f5399f0262c98ea0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include_lowest=</highlight><highlight class="keyword">False</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="222"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return<sp/>indices<sp/>of<sp/>half-open<sp/>bins<sp/>to<sp/>which<sp/>each<sp/>value<sp/>of<sp/>`x`<sp/>belongs.</highlight></codeline>
<codeline lineno="223"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="225"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="226"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refFeature:<sp/>the<sp/>feature<sp/>which<sp/>will<sp/>be<sp/>cutted</highlight></codeline>
<codeline lineno="227"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newFeature:<sp/>new<sp/>name<sp/>of<sp/>the<sp/>feature<sp/>which<sp/>is<sp/>the<sp/>result<sp/>of<sp/>pd.cut</highlight></codeline>
<codeline lineno="228"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bins<sp/>:<sp/>int,<sp/>sequence<sp/>of<sp/>scalars,<sp/>or<sp/>IntervalIndex</highlight></codeline>
<codeline lineno="229"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>`bins`<sp/>is<sp/>an<sp/>int,<sp/>it<sp/>defines<sp/>the<sp/>number<sp/>of<sp/>equal-width<sp/>bins<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="230"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>range<sp/>of<sp/>`x`.<sp/>However,<sp/>in<sp/>this<sp/>case,<sp/>the<sp/>range<sp/>of<sp/>`x`<sp/>is<sp/>extended</highlight></codeline>
<codeline lineno="231"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>by<sp/>.1%<sp/>on<sp/>each<sp/>side<sp/>to<sp/>include<sp/>the<sp/>min<sp/>or<sp/>max<sp/>values<sp/>of<sp/>`x`.<sp/>If</highlight></codeline>
<codeline lineno="232"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>`bins`<sp/>is<sp/>a<sp/>sequence<sp/>it<sp/>defines<sp/>the<sp/>bin<sp/>edges<sp/>allowing<sp/>for</highlight></codeline>
<codeline lineno="233"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>non-uniform<sp/>bin<sp/>width.<sp/>No<sp/>extension<sp/>of<sp/>the<sp/>range<sp/>of<sp/>`x`<sp/>is<sp/>done<sp/>in</highlight></codeline>
<codeline lineno="234"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>case.</highlight></codeline>
<codeline lineno="235"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right<sp/>:<sp/>bool,<sp/>optional</highlight></codeline>
<codeline lineno="236"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indicates<sp/>whether<sp/>the<sp/>bins<sp/>include<sp/>the<sp/>rightmost<sp/>edge<sp/>or<sp/>not.<sp/>If</highlight></codeline>
<codeline lineno="237"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right<sp/>==<sp/>True<sp/>(the<sp/>default),<sp/>then<sp/>the<sp/>bins<sp/>[1,2,3,4]<sp/>indicate</highlight></codeline>
<codeline lineno="238"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1,2],<sp/>(2,3],<sp/>(3,4].</highlight></codeline>
<codeline lineno="239"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>labels<sp/>:<sp/>array<sp/>or<sp/>boolean,<sp/>default<sp/>None</highlight></codeline>
<codeline lineno="240"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Used<sp/>as<sp/>labels<sp/>for<sp/>the<sp/>resulting<sp/>bins.<sp/>Must<sp/>be<sp/>of<sp/>the<sp/>same<sp/>length<sp/>as</highlight></codeline>
<codeline lineno="241"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>resulting<sp/>bins.<sp/>If<sp/>False,<sp/>return<sp/>only<sp/>integer<sp/>indicators<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="242"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bins.</highlight></codeline>
<codeline lineno="243"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retbins<sp/>:<sp/>bool,<sp/>optional</highlight></codeline>
<codeline lineno="244"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Whether<sp/>to<sp/>return<sp/>the<sp/>bins<sp/>or<sp/>not.<sp/>Can<sp/>be<sp/>useful<sp/>if<sp/>bins<sp/>is<sp/>given</highlight></codeline>
<codeline lineno="245"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>as<sp/>a<sp/>scalar.</highlight></codeline>
<codeline lineno="246"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precision<sp/>:<sp/>int,<sp/>optional</highlight></codeline>
<codeline lineno="247"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>precision<sp/>at<sp/>which<sp/>to<sp/>store<sp/>and<sp/>display<sp/>the<sp/>bins<sp/>labels</highlight></codeline>
<codeline lineno="248"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include_lowest<sp/>:<sp/>bool,<sp/>optional</highlight></codeline>
<codeline lineno="249"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Whether<sp/>the<sp/>first<sp/>interval<sp/>should<sp/>be<sp/>left-inclusive<sp/>or<sp/>not.</highlight></codeline>
<codeline lineno="250"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="251"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="252"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="253"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>:<sp/>Categorical<sp/>or<sp/>Series<sp/>or<sp/>array<sp/>of<sp/>integers<sp/>if<sp/>labels<sp/>is<sp/>False</highlight></codeline>
<codeline lineno="254"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>return<sp/>type<sp/>(Categorical<sp/>or<sp/>Series)<sp/>depends<sp/>on<sp/>the<sp/>input:<sp/>a<sp/>Series</highlight></codeline>
<codeline lineno="255"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>type<sp/>category<sp/>if<sp/>input<sp/>is<sp/>a<sp/>Series<sp/>else<sp/>Categorical.<sp/>Bins<sp/>are</highlight></codeline>
<codeline lineno="256"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>represented<sp/>as<sp/>categories<sp/>when<sp/>categorical<sp/>data<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="257"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bins<sp/>:<sp/>ndarray<sp/>of<sp/>floats</highlight></codeline>
<codeline lineno="258"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returned<sp/>only<sp/>if<sp/>`retbins`<sp/>is<sp/>True.</highlight></codeline>
<codeline lineno="259"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="260"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Notes</highlight></codeline>
<codeline lineno="261"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-----</highlight></codeline>
<codeline lineno="262"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>`cut`<sp/>function<sp/>can<sp/>be<sp/>useful<sp/>for<sp/>going<sp/>from<sp/>a<sp/>continuous<sp/>variable<sp/>to</highlight></codeline>
<codeline lineno="263"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>categorical<sp/>variable.<sp/>For<sp/>example,<sp/>`cut`<sp/>could<sp/>convert<sp/>ages<sp/>to<sp/>groups</highlight></codeline>
<codeline lineno="264"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>age<sp/>ranges.</highlight></codeline>
<codeline lineno="265"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="266"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Any<sp/>NA<sp/>values<sp/>will<sp/>be<sp/>NA<sp/>in<sp/>the<sp/>result.<sp/><sp/>Out<sp/>of<sp/>bounds<sp/>values<sp/>will<sp/>be<sp/>NA<sp/>in</highlight></codeline>
<codeline lineno="267"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>resulting<sp/>Categorical<sp/>object</highlight></codeline>
<codeline lineno="268"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="269"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="270"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Examples</highlight></codeline>
<codeline lineno="271"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--------</highlight></codeline>
<codeline lineno="272"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>pd.cut(np.array([.2,<sp/>1.4,<sp/>2.5,<sp/>6.2,<sp/>9.7,<sp/>2.1]),<sp/>3,<sp/>retbins=True)</highlight></codeline>
<codeline lineno="273"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/>#<sp/>doctest:<sp/>+ELLIPSIS</highlight></codeline>
<codeline lineno="274"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>([(0.19,<sp/>3.367],<sp/>(0.19,<sp/>3.367],<sp/>(0.19,<sp/>3.367],<sp/>(3.367,<sp/>6.533],<sp/>...</highlight></codeline>
<codeline lineno="275"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Categories<sp/>(3,<sp/>interval[float64]):<sp/>[(0.19,<sp/>3.367]<sp/>&lt;<sp/>(3.367,<sp/>6.533]<sp/>...</highlight></codeline>
<codeline lineno="276"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="277"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>pd.cut(np.array([.2,<sp/>1.4,<sp/>2.5,<sp/>6.2,<sp/>9.7,<sp/>2.1]),</highlight></codeline>
<codeline lineno="278"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/>labels=[&quot;good&quot;,<sp/>&quot;medium&quot;,<sp/>&quot;bad&quot;])</highlight></codeline>
<codeline lineno="279"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/>#<sp/>doctest:<sp/>+SKIP</highlight></codeline>
<codeline lineno="280"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[good,<sp/>good,<sp/>good,<sp/>medium,<sp/>bad,<sp/>good]</highlight></codeline>
<codeline lineno="281"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Categories<sp/>(3,<sp/>object):<sp/>[good<sp/>&lt;<sp/>medium<sp/>&lt;<sp/>bad]</highlight></codeline>
<codeline lineno="282"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="283"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>pd.cut(np.ones(5),<sp/>4,<sp/>labels=False)</highlight></codeline>
<codeline lineno="284"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array([1,<sp/>1,<sp/>1,<sp/>1,<sp/>1])</highlight></codeline>
<codeline lineno="285"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test[Base.target]<sp/>=<sp/>-1</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combine<sp/>=<sp/>Base.train.append(Base.test)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combine[newFeature]<sp/>=<sp/>pd.cut(combine[refFeature],<sp/>bins,<sp/>right,<sp/>labels,<sp/>retbins,<sp/>precision,include_lowest)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train<sp/>=<sp/>combine[0:Base.train.shape[0]]</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test<sp/>=<sp/>combine[Base.train.shape[0]::]</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test<sp/>=<sp/>Base.test.drop([Base.target],<sp/>axis=1)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="classspeedml_1_1feature_1_1_feature_1a3d6f963fd571ad1f4d9d781b7c1e7a07" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1a3d6f963fd571ad1f4d9d781b7c1e7a07" kindref="member">mapFunction</ref>(self,fun,feature1,feature2=None):</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>feature2<sp/>==<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>feature2<sp/>=<sp/>feature1</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train[feature2]<sp/>=<sp/>Base.train[feature1].map(fun)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test[feature2]<sp/>=<sp/>Base.test[feature1].map(fun)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classspeedml_1_1feature_1_1_feature_1a1dd5a51e1c4a407b248c7dd39956c18a" kindref="member">get_dummies</ref>(self,<sp/>prefix=None,<sp/>prefix_sep=&apos;_&apos;,<sp/>dummy_na=False,</highlight></codeline>
<codeline lineno="302" refid="classspeedml_1_1feature_1_1_feature_1a1dd5a51e1c4a407b248c7dd39956c18a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columns=</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>sparse=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>drop_first=</highlight><highlight class="keyword">False</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test[Base.target]<sp/>=<sp/>-1</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combine<sp/>=<sp/>Base.train.append(Base.test)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combine<sp/>=<sp/>pd.get_dummies(combine,<sp/>prefix=prefix,<sp/>prefix_sep=prefix_sep,<sp/>dummy_na=dummy_na,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columns=columns,<sp/>sparse=sparse,<sp/>drop_first=drop_first)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.train<sp/>=<sp/>combine[0:Base.train.shape[0]]</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test<sp/>=<sp/>combine[Base.train.shape[0]::]</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base.test<sp/>=<sp/>Base.test.drop([Base.target],<sp/>axis=1)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="D:/programs/Python3.5.2/Lib/site-packages/speedml/feature.py"/>
  </compounddef>
</doxygen>
